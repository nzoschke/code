#!/usr/bin/env python

import argparse
import base64
import hmac, sha
import os
import shutil
from string import Template
import subprocess
import sys
import tempfile
from time import time
import urllib
from urlparse import urlparse

class S3(object):
  def __init__(self, method, src=None, dest=None, url=False, ttl=30):
    self.method = method
    self.src    = src
    self.dest   = dest
    self.ttl    = ttl

    m = self.method
    if url:
      m += "_url"
    self.__getattribute__(m)()

  def signed_url(self, method, url):
    try:
      AWSAccessKeyId      = os.environ["S3_ACCESS_KEY_ID"]
      AWSSecretAccessKey  = os.environ["S3_SECRET_ACCESS_KEY"]
    except KeyError, e:
      print "error: S3_ACCESS_KEY_ID and S3_SECRET_ACCESS_KEY not set"
      sys.exit(1)

    uri     = urlparse(url)
    bucket  = uri.hostname
    key     = uri.path[1:]
    expires = int(time()) + self.ttl

    canonical_string = "/%s/%s" % (bucket, key)
    stringToSign = method + "\n\n\n" + str(expires) + "\n" + canonical_string
    signature = base64.b64encode(hmac.new(AWSSecretAccessKey, stringToSign, sha).digest())
    return "http://"+bucket+".s3.amazonaws.com/"+urllib.quote(key)+"?AWSAccessKeyId="+urllib.quote(AWSAccessKeyId)+"&Expires="+str(expires)+"&Signature="+urllib.quote(signature)

  def get(self):
    basename = os.path.basename(self.src)
    self.log(
      ("file",  "s3"),
      ("fn",    "get"),
      ("at",    "start"),
      ("key",   basename),
    )

    temp_dir    = tempfile.mkdtemp()

    get_url     = self.signed_url("GET", self.src)
    header_file = os.path.join(temp_dir, "header")
    output_file = os.path.join(temp_dir, os.path.basename(self.src))

    conf = """
      connect-timeout = 5
      dump-header     = "$header_file"
      output          = "$output_file"
      max-time        = 60
      request         = "GET"
      retry           = 1
      silent          = "true"
      speed-time      = 30
      speed-limit     = 3000
      url             = "$get_url"
      write-out       = "code=%{http_code} size=%{size_download} speed=%{speed_download} elapsed=%{time_total}"
    """

    conf = Template(conf).substitute(get_url=get_url, header_file=header_file, output_file=output_file)
    p = subprocess.Popen(["curl", "--config", "-"], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    stdout, stderr = p.communicate(input=conf)

    headers = {}
    with open(header_file) as f:
      for line in f:
        l = line.split(":", 1)
        if len(l) == 2:
          headers[l[0]] = l[1].strip()

    shutil.move(output_file, self.dest)

    self.log(
      ("file",              "s3"),
      ("fn",                "get"),
      ("at",                "finish"),
      ("key",               basename),
      ("x-amz-id-2",        headers["x-amz-id-2"]),
      ("x-amz-request-id",  headers["x-amz-request-id"]),
      stdout
    )
    return True

  def put(self):
    pass

  def get_url(self):
    print self.signed_url("GET", self.src)

  def put_url(self):
    print self.signed_url("PUT", self.dest)

  def log(self, *args):
    d = []
    for a in args:
      if isinstance(a, basestring):
        d.append(a)
      else:
        d.append("%s=%s" % a) # presumably tuple or list
    sys.stderr.write(" ".join(d) + "\n")

if __name__ == "__main__":
  parser      = argparse.ArgumentParser(
    description="Generate signed S3 URLs, and GET/PUT S3 objects via cURL",
    epilog="""
      S3_ACCESS_KEY_ID and S3_SECRET_ACCESS_KEY must be passed via the environment.
      S3_SRC or S3_DEST can be passed instead of --src or --dest.
    """
  )
  subparsers  = parser.add_subparsers()
  parser_get  = subparsers.add_parser("get")
  parser_put  = subparsers.add_parser("put")

  parser_get.add_argument("--src",  help="source URL to GET object", required=True)
  parser_get.add_argument("--dest", help="destination path to write object (default .)", default=".")
  parser_get.add_argument("--url",  help="generate signed URL instead of performing GET", action="store_true")
  parser_get.add_argument("--ttl",  help="signed URL time to live in seconds (default 30)", type=int, default=30)
  parser_get.set_defaults(method="get")

  parser_put.add_argument("--src",  help="source path to read object")
  parser_put.add_argument("--dest", help="destination URL to PUT object", required=True)
  parser_put.add_argument("--url",  help="generate signed URL instead of performing PUT", action="store_true")
  parser_put.add_argument("--ttl",  help="signed URL time to live in seconds (default 30)", type=int, default=30)
  parser_put.set_defaults(method="put")

  # read S3_DEST, S3_SRC args from env
  argv = sys.argv[1:]
  for f in ["dest", "src"]:
    k = "S3_%s" % f.replace("-", "_").upper()
    if os.environ.get(k):
      argv += ["--%s" % f, os.environ[k]]

  args = parser.parse_args(argv)
  s3 = S3(**vars(args))
